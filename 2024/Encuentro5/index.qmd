---
pagetitle: "Documentos estáticos de Quarto®"
format: 
  revealjs:
    self-contained: true
    width: 1920
    height: 1080
    slide-number: true
    transition: fade
    theme: [simple, custom.scss]
    logo: INE.gif
    footer: "Instituto Nacional de Epidemiología"
editor: source
bibliography: references.bib
---

```{r setup, include=F}
library(quarto)
library(fontawesome)
library(tidyverse)
```

```{r}
#| include: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#d78e1c",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}
```

##  {#docu-estaticos-title data-menu-title="Documentos estáticos de Quarto®" background-image="images/maquina.webp" aria-label="Maquina de escribir"}

[Documentos estáticos de<br>Quarto®]{.custom-title .centrar}

[Encuentro 5<br>2024]{.custom-subtitle}

[Christian Ballejo]{.custom-author}

## Enlaces web {.title-top}

<br>

Existen varios tipos de "enlaces" o hipervínculos.

<br>

::: columns
::: {.column width="65%"}
**Markdown**

``` markdown
Se pueden insertar links en formato Markdown vinculados 
a un texto como este de [Quarto](https://quarto.org/), 
URL directas como <https://www.ine.gov.ar/> y 
enlaces a [otros lugares](#docu-estaticos-title) 
en el mismo documento. 
La sintaxis es similar a incrustar un imagen en línea: 
![Nombre](imagen.png). 
```
:::

::: {.column .fragment width="35%"}
**Salida**

Se pueden insertar links en formato Markdown vinculados a un texto como este de [Quarto](https://quarto.org/), URL directas como <https://www.ine.gov.ar/> y 
enlaces a [otros lugares](#docu-estaticos-title) en el mismo documento. 
La sintaxis es similar a incrustar un imagen en línea: ![Logo INE](logo_INE.PNG){style="width:50px;"}.
:::
:::



## Listas {.title-top}

<br>

Listas sin orden:

::: columns
::: {.column width="50%"}
**Markdown:**

``` markdown
-   Lista sin orden       
    -   sub-item 1         
    -   sub-item 1         
        -   sub-sub-item 1 
```
:::

::: {.column .fragment width="50%" fragment-index="1"}
**Salida**

-   Lista sin orden
    -   sub-item 1\
    -   sub-item 1
        -   sub-sub-item 1
:::
:::

Listas ordenadas:

::: columns
::: {.column width="50%"}
**Markdown:**

``` markdown
1. Lista ordenada            
2. item 2                  
   i. sub-item 1          
      a.  sub-sub-item 1
```
:::

::: {.column .fragment width="50%" fragment-index="2"}
**Salida**

1.  Lista ordenada\
2.  item 2
    i.  sub-item 1
        a.  sub-sub-item 1
:::
:::

## Citas

<br>

**Markdown:**

``` markdown
> Cambiemos nuestra actitud tradicional hacia la construcción 
> de programas: en lugar de imaginar que nuestra tarea principal
> es indicarle a una computadora qué hacer, concentrémonos más
> bien en explicar a los seres humanos lo que queremos que haga
> una computadora. - Donald Knuth
```

. . .

<br>

**Salida:**

> Cambiemos nuestra actitud tradicional hacia la construcción de programas: en lugar de imaginar que nuestra tarea principal es indicarle a una computadora qué hacer, concentrémonos más bien en explicar a los seres humanos lo que queremos que haga una computadora. - Donald Knuth

::: aside
"Literate Programming", The Computer Journal 27 (1984), p. 97. (Reprinted in Literate Programming, 1992, p. 99.) Literate Programming (1984) <br> <br>
:::

## Tablas {.title-top}

<br>

Tablas Markdown

**Markdown:**

``` markdown
| Derecha | Izquierda | Predeterminado | Centrado |
|--------:|:----------|----------------|:--------:|
|    12   |    12     |       12       |    12    |
|   123   |   123     |      123       |   123    |
|     1   |     1     |        1       |     1    |
```

. . .

<br>

**Salida:**

| Derecha | Izquierda | Predeterminado | Centrado |
|--------:|:----------|----------------|:--------:|
|      12 | 12        | 12             |    12    |
|     123 | 123       | 123            |   123    |
|       1 | 1         | 1              |    1     |

## Tablas Grid (cuadrícula) {.title-top}

<br>

Las tablas cuadrícula son un tipo más avanzado de tablas de Markdown que permiten otros elementos (múltiples párrafos, bloques de código, listas, etc.)

<br>

**Markdown:**

``` markdown
+---------------+---------------+--------------------+
| Formato       | Extensión     | Ventajas           |
+===============+===============+====================+
| Documento     | pdf           | - Seguro           |
| portable      |               | - Universal        |
+---------------+---------------+--------------------+
| Word          | docx          | - Editable         |
|               |               | - Universal        |
+---------------+---------------+--------------------+

: Ejemplo tabla cuadrícula 
```

## Tablas Grid (cuadrícula) {.title-top}

<br>

**Salida:**

<br>

+--------------------+----------------+----------------+
| Formato            | Extensión      | Ventajas       |
+====================+================+================+
| Documento portable | pdf            | -   Seguro     |
|                    |                | -   Universal  |
+--------------------+----------------+----------------+
| Word               | docx           | -   Editable   |
|                    |                | -   Universal  |
+--------------------+----------------+----------------+

: Ejemplo tabla cuadrícula

## Tablas cuadrícula: Alineación {.title-top}

<br>

-   Las alineaciones se pueden especificar como en las tablas anteriores, colocando dos puntos en los límites de la línea de separación después del encabezado:

```         
+--------------------+---------------+--------------------+
| Derecha            | Izquierda     | Centrado           |
+===================:+:==============+:==================:+
| Documento portable | pdf           | -  Seguro          |
+--------------------+---------------+--------------------+
```

. . .

<br>

-   Para tablas sin encabezado, los dos puntos van en la línea superior:

```         
+--------------:+:--------------+:------------------:+
| Derecha       | Izquierda     | Centrado           |
+---------------+---------------+--------------------+
```

## Tablas cuadrícula: Creación {.title-top}

<br>

:::: columns

::: {.column width="50%"}

::: incremental
-   Tengamos en cuenta que las tablas cuadrícula son bastante complicadas de escribir con un editor de texto plano porque, a diferencia de las tablas comunes, los indicadores de columna deben alinearse.

<br>

-   ¡El Editor Visual puede ayudar a crear estas tablas! para profundizar ver [Guía Quarto](https://quarto.org/docs/visual-editor/content.html#editing-tables)

<br>

-   También podemos utilizar herramientas online como [TablesGenerator](https://www.tablesgenerator.com/markdown_tables)
:::

:::

::: {.column width="50%"}

![](images/letras.jpg){.absolute top="200" left="1250" width="500"}

:::

::::

## Tablas desde código {.title-top}

<br>

Directas, igual que la salida en consola y estéticamentente feas.

```{r}
#| echo: fenced
library(datos)

pinguinos |> 
  slice(1:6)
```

## Tablas desde código {.title-top}

<br>

El paquete **knitr**, incuído en RStudio, puede convertir las salidas estos dataframes en tablas visuales con `knitr::kable()`:

<br>

```{r}
library(knitr)

pinguinos |> 
  slice(1:8) |> 
  kable()
```

## Tablas desde código {.title-top}

<br>

Existen numerosos paquetes para darle formato a las tablas producidas mediante código. 

Un ejemplo muy completo es el paquete **flextable**, que además es compatible con salidas en pdf y Word (docx). 

La documentación se encuentra en este [enlace](https://ardata-fr.github.io/flextable-book/)

<br>

```{r}
library(flextable)

head(pinguinos) |> 
flextable() |> 
fontsize(size = 26, part = "all") |> 
height_all(height = 1, part = "all", unit = "in") |> 
colformat_num(big.mark = "", decimal.mark = ",", digits = 2, na_str = "N/A") |>  
theme_zebra()
```

## Tablas desde código {.title-top}

<br>

Otro paquete para tablas elaboradas es **gt**. 

Aquí podemos encontrar [todo lo que ofrece](https://gt.rstudio.com/).

<br>

```{r}
#| output-location: column-fragment

library(gt)

head(pinguinos) |> 
  gt() |>
 tab_options(table.font.size = 40) |> 
  tab_style(
    style = list(
      cell_fill(color = "pink"),
      cell_text(style = "italic")
      ),
    locations = cells_body(
      columns = largo_pico_mm,
      rows = largo_pico_mm > 40
    )
  )
```

## `r fontawesome::fa("laptop-code", "white")`️ Actividad 1 {background-color="#704b10" transition="slide-in"}

<br>

::: {.fragment .actividades}
- Inserte un enlace al sitio web de ANLIS (https://www.argentina.gob.ar/salud/anlis)

- Inserte una tabla **Markdown de 3 x 3** con el contenido que quiera. Apele a su creatividad

- Edite la tabla desde el *modo visual* y pruebe algunos de los cambios ofrecidos. Renderice y observe.

- Incorpore un chunk de R. Tome una porción del dataset **encuesta** incluído en el *paquete datos* y muestre el dataframe como una tabla utilizando la función `kable()` de **knitr**.
:::

## Fórmulas {.title-top}

<br>

Al igual que en RMarkdown se puede insertar fórmulas matemáticas Latex en linea o en imagen completa, utilizando \$ o \$\$ según corresponda.

-   Este es un ejemplo de formula en linea $\sqrt{\frac{\alpha}{2}}$

``` markdown
$\sqrt{\frac{\alpha}{2}}$
```

<br>

-   La siguiente es una formula completa:

$$
R(t)= A \left(\frac{E_0}{\rho_0}\right)^{1/5}t^{2/5}
$$
``` markdown
$$
R(t)= A \left(\frac{E_0}{\rho_0}\right)^{1/5}t^{2/5}
$$
``` 

## Caracteres especiales, emojis y listas de definiciones {.title-top}

![](images/tipos_0.webp){.absolute top="230" left="1050" width="600"}

<br>

En el modo Visual se pueden insertar facilmente caracteres especiales de distinto tipo, emojis y listas de términos. Por ejemplo:

<br>

Caracteres especiales:

② ≋ 𝄞 ⍾ ◴ ⭆

<br>

Emojis:

😀 🥶 👍 🤡

<br>

Listas de definición

**Clase** en programación orientada a objetos

:   Es una plantilla que define las características y comportamientos de una entidad

## Artículos científicos {.title-top}

<br>

Quarto soporta la construcción de artículos científicos a través de plantillas preformateadas o personalizadas donde encontraremos:

:::: columns

::: {.column width="50%"}

::: incremental

<br>

-   un esquema estandarizado para autores que se puede expresar una vez en el documento fuente (aunque se apliquen multiples plantillas de salida),

-   el uso de **Citation Style Language** (CSL) para automatizar el formato de citas y bibliografías,

-   herramientas de **RStudio** *modo Visual* para trabajar con **Zotero**, DOI's, CrossRef, DataCite, PubMed y archivos .bib,


-   salida a `pdf`, `html` y `docx` con formato personalizado,
:::

:::

::: {.column width="50%"}

![](images/Q.png){.absolute top="350" left="1250" width="400"}

:::

::::

## Formatos de revistas {.title-top}

<br>

Existen plantillas preformateadas que cumplen con requisitos dispuestos por varias revistas científicas internacionales que se pueden aplicar en Quarto.

- [American Psychological Association, Septima Edición (APA7)](https://github.com/wjschne/apaquarto) 

- [Elsevier](https://github.com/quarto-journals/elsevier)

- [Public Library of Science (PLOS)](https://github.com/quarto-journals/plos)

- [Plantilla para preprints arxiv](https://github.com/mikemahoney218/quarto-arxiv)

- [Springer Nature](https://github.com/christopherkenny/nature)

<br>

También existen formas de estructurar una plantilla propia o con especificaciones particulares.

<br>

Para ver las extensiones disponibles de [Quarto - Journal Articles](https://quarto.org/docs/extensions/listing-journals.html) 

## Autores {.title-top}

Metadatos de YAML para codificar datos de autores y sus afiliaciones. Ver capítulo [Authors & Affiliations](https://quarto.org/docs/journals/authors.html)

``` markdown
author:
  - id: string
    number: number
    name:
      given: string
      family: string
      literal: string
      dropping-particle: string
      non-dropping-particle: string
    url: string
    email: string
    phone: string
    fax: string
    degrees: 
      # ver equema
    orcid: string
    note: string
    acknowledgements: string
    attributes:
      corresponding: boolean
      equal-contributor: boolean
      deceased: boolean
    roles: 
      # ver equema
    metadata: object
    affiliations: 
      # ver equema
``` 

## Citas bibliográficas {.title-top}

![](images/DOI.jpg){.absolute top="600" left="720" width="450"}

<br>

Quarto utiliza la representación de Mardown estándar de Pandoc para las citas (por ejemplo [\@cita]): las citas van entre corchetes y están separadas por punto y coma. Cada cita debe tener una clave, compuesta por "\@" + el identificador de la cita de la base de datos.


<br>

Pandoc le brinda el formato a las citas bibliograficas. De forma predeterminada, usa el formato autor-fecha del estilo Chicago, pero puede especificarse un formato personalizado utilizando **CSL** (Citation Style Language) en la cabecera YAML del documento.

## Citas bibliográficas {.title-top}

<br>

En la cabecera YAML se define:

- el nombre del archivo **.bib** o **.bibtex** donde están las citas a usar - metadato bibliography:

- el archivo **.csl** que determina el formato de cita - metadato csl: - acceder a [Repositorio archivos CSL](https://github.com/citation-style-language/styles) y [Repositorio CSL Zotero](https://www.zotero.org/styles)

- en formato PDF se puede seleccionar si se maneja el sistema de citas con `citeproc` de Pandoc o alternativamente `natlib` o `BibLatex` - metadato cite-method:

<br>

Muchas de estas configuraciones ya vienen predeterminadas en las plantillas de revistas.

## `r fontawesome::fa("laptop-code", "white")`️ Actividad 2 {background-color="#704b10" transition="slide-in"}

<br>

::: {.fragment .actividades}
-   Inserte, desde las herramientas del modo visual, una referencia a partir de este DOI https://doi.org/10.31053/1853.0605.v81.n1.42138 (copielo y peguelo en el menú que le va a constuir un archivo .bib). 

- Renderice y observe la escritura en el modo source

- Abra y observe el contenido del archivo references.bib

- Revise la cabecera YAML del documento y busque la línea bibliography: references.bib
:::

## Anotaciones en el código {.title-top}

Se pueden agregar anotaciones en el código.

```{r}
#| eval: false
#| echo: true
pinguinos |>                             # <1>
  ggplot(aes(x = largo_pico_mm,          # <2>
             y = alto_pico_mm,           # <2>
             color = isla)) +            # <2>
  geom_point()
```

1. Tome el dataset `pingüinos`, y luego,
2. agregue variables para definir en cada parte del gráfico.

<br>

Las líneas resaltadas finalizan con la siguiente notación:

``` markdown
pinguinos |>                             # <1>
  ggplot(aes(x = largo_pico_mm,          # <2>
             y = alto_pico_mm,           # <2>
             color = isla)) +            # <2>
```
1. Tome el dataset `pingüinos`, y luego,
2. agregue variables para definir en cada parte del gráfico.

## Código destacado {.title-top}

<br>

Solo funciona en presentaciones revealjs. El código destacado provoca que el resto aparezca "grisado".

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "8"
library(datos)
library(ggplot2)

pinguinos |>                             
  ggplot(aes(x = largo_pico_mm,          
             y = alto_pico_mm,           
             color = isla)) +            
  geom_point()
```

<br>

Para resaltar la línea o lineas deseadas solo hace falta declarar la opción en los metadatos del fragmento. En este ejemplo se ejecutó la siguiente línea:

\#\| code-line-numbers: "8"

## Opciones de código de ejecución {.title-top}

<br>

Algunas de las opciones de control de ejecución de los chunck de código.

::: {style="font-size: 1em"}
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Opción    | Descripción                                                                                                                                                                                       |
+===========+===================================================================================================================================================================================================+
| `eval`    | Evalua el codigo del chunk (si es `false`, saltea el código y no lo ejecuta).                                                                                                                     |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `echo`    | Incluye el código fuente en la salida                                                                                                                                                             |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `output`  | Incluye el resultado de la ejecución del código en la salida (`true`, `false`, or `asis` para indicar que muestre los resultados en forma cruda).                                                 |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `warning` | Gestiona las advertencias en la salida.                                                                                                                                                           |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `error`   | Gestiona los errores en la salida.                                                                                                                                                                |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `include` | Evita que se incluya cualquier salida (código o resultados) (por ejemplo `include: false` suprime toda la salida del bloque de código).                                                           |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `message` | Gestiona los mensajes en la salida                                                                                                                                                                |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `fig-*`   | Familia de opciones para las figuras (alto, ancho, alineación, nombre, resolución, etc)                                                                                                           |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
:::

## Ejemplo: Gráficos desde código {.title-top auto-animate="true"}

<br>

:::: columns

::: {.column width="50%"}

```` markdown
```{{r}}
library(datos)
library(ggplot2)

pinguinos |> 
  ggplot(aes(x = largo_pico_mm,
                     y = alto_pico_mm,
                     col = isla)) +
  geom_point()
```
````
:::

::: {.column .fragment width="50%"}

```{r}
#| echo: false
library(datos)
library(ggplot2)

pinguinos |> 
  ggplot(aes(x = largo_pico_mm,
                     y = alto_pico_mm,
                     col = isla)) +
  geom_point() +
  theme_grey(base_size = 18)
```

:::

::::

## Ejemplo: Gráficos desde código {.title-top auto-animate="true"}

<br>

::: columns
::: {.column width="50%"}
```` markdown
```{{r}}
#| fig-width: 5
#| fig-height: 3

library(datos)
library(ggplot2)

pinguinos |> 
  ggplot(aes(x = largo_pico_mm,
                     y = alto_pico_mm,
                     col = isla)) +
  geom_point()
```
````
:::

::: {.column .fragment width="50%"}
```{r}
#| echo: false
#| fig-width: 5
#| fig-height: 3

library(datos)
library(ggplot2)

pinguinos |> 
  ggplot(aes(x = largo_pico_mm,
                     y = alto_pico_mm,
                     col = isla)) +
  geom_point() +
  theme_grey(base_size = 18)
```
:::
:::

## Ejemplo: Gráficos desde código {.title-top auto-animate="true"}

<br>

::: columns
::: {.column width="50%"}
```` markdown
```{{r}}
#| fig-width: 5
#| fig-height: 3
#| fig-cap: "Tamaño de los pingüinos en 
tres islas del Archipelago Palmer."
#| fig-alt: "Diagrama de dispersión que 
muestra el tamaño de los picos de los 
pingüinos en tres islas"

library(datos)
library(ggplot2)

pinguinos |> 
  ggplot(aes(x = largo_pico_mm,
                     y = alto_pico_mm,
                     col = isla)) +
  geom_point()
```
````
:::

::: {.column .fragment width="50%"}
```{r}
#| echo: false
#| fig-width: 5
#| fig-height: 3
#| fig-cap: "Tamaño de los pingüinos en tres islas del Archipelago Palmer."
#| fig-alt: "Diagrama de dispersión que muestra el tamaño de los picos de los pingüinos en tres islas"


library(datos)
library(ggplot2)

pinguinos |> 
  ggplot(aes(x = largo_pico_mm,
                     y = alto_pico_mm,
                     col = isla)) +
  geom_point()+
  theme_grey(base_size = 18)
```
:::
::::


## `r fontawesome::fa("laptop-code", "white")`️ Actividad 3 {background-color="#704b10" transition="slide-in"}

<br>

::: {.fragment .actividades}
-   Construya un fragmento de código de R (chunk) a partir del dataset **diamantes** del *paquete datos*, donde se muestre un gráfico de puntos entre las variables `precio` y `quilate`.

- Modifique mediante código de ejecución: 
  - su tamaño, 
  - que se muestre y se oculte el código y, 
  - que se evalue y no se evalue el mismo código.

- En cada situación renderice y observe los cambios.
:::