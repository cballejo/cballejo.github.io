---
pagetitle: "Documentos estáticos de Quarto®"
format: 
  revealjs:
    self-contained: true
    width: 1920
    height: 1080
    slide-number: true
    transition: fade
    theme: [simple, custom.scss]
    logo: INE.gif
    footer: "Instituto Nacional de Epidemiología"
editor: source
---

```{r setup, include=F}
library(quarto)
library(fontawesome)
library(tidyverse)
```

```{r}
#| include: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#d78e1c",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}
```

##  {#docu-estaticos-title data-menu-title="Documentos estáticos de Quarto®" background-image="images/notepad.jpg" aria-label="Mujer escribiendo un documento"}

[Documentos estáticos de<br>Quarto®]{.custom-title}

[Encuentro 4<br>2024]{.custom-subtitle}

[Christian<br>Ballejo]{.custom-author}

## Esqueleto de un .qmd {.title-top}

Los archivos `.qmd` suelen tener tres partes. Una sola cabecera YAML (obligatoria), texto y código (mezclado).

<br>

````         
---
title: "ggplot2"
date: "18/04/2024"
format: html
---

## Calidad del aire

Esta es la relación entre la temperatura y el nivel de ozono.

```{{r}}
#| label: fig-calidad_aire
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess"
)
```
````

. . .

::: {style="background: #a13c6530; width: 430px; height: 210px; margin: 5px; position: absolute; top: 220px; left: 0px;"}
:::

. . .

::: {style="background: #fa551c30; width: 1280px; height: 190px; margin: 5px; position: absolute; top: 460px; left: 0px;"}
:::

. . .

::: {style="background: #6a9c4230; width: 1100px; height: 350px; margin: 5px; position: absolute; top: 670px; left: 0px;"}
:::

## Opciones de salida YAML {.title-top}

<br>

``` yaml
---
format: html
---
```

. . .

``` yaml
---
format: pdf
---
```

. . .

``` yaml
---
format: typst
---
```

`typst` es un [nuevo sistema de composición tipográfica](https://typst.app/docs/) basado en marcas para ciencia.

. . .

Se le pueden agregar opciones. Las opciones deben estar debajo del formato principal (los espacios son importante y hay que respetarlos -identación-)

``` yaml
---
format: 
  html:
    toc: true
    code-fold: true
---
```

## YAML es sensible a la identación {.title-top}

::: columns
::: {.column width="70%"}
``` yaml
---
format:html # invalido, falta espacio luego de :
---

---
format: # invalido, se lee como formato ausente
html
---

---
format: 
  html: # valido pero necesita de opciones posteriores
---
```

El formato válido puede ser diferente según lo que se necesite.

``` yaml
format: html # valido - hay espacio

# valido - formato con opciones
format: 
  html:
    toc: true
```
:::

::: {.column width="30%"}
![](images/trabajando.jpg){.r-stretch}
:::
:::

## Ventajas de RStudio {.title-top}

<br>

RStudio (también algunos otros editores como VSCode) integran entre sus herramientas la finalización enriquecida: podemos comenzar con una palabra y tabular (TAB) para completar, o presionar `Ctrl + espacio` para ver todas las opciones disponibles.

![](images/Captura1.PNG){.absolute top="370" left="550" width="800"}

## `r fontawesome::fa("laptop-code", "white")`️ Actividad 1 {background-color="#704b10" transition="slide-in"}

<br>

::: {.fragment .actividades}
-   Genere un nuevo proyecto y dentro un documento de Quarto desde RStudio (formato HTML)

<br>

-   Pruebe <kbd>`Ctrl + space`</kbd> para visualizar las opciones de YAML

<br>

-   Pruebe con la tabulación para completar otras opciones que recuerde
:::

```{R}
#| echo: false
countdown_timer(2)
```

## Texto y Markdown {.title-top transition="zoom"}

<br>

Inicialmente y para el uso general conviene aprovechar el `modo Visual` de RStudio para incorporar marcas de lenguaje Markdown.

![](images/Captura2.PNG){.absolute top="280" left="400" width="1200"}

## Bloques {.title-top}

Pandoc y, por tanto, Quarto aceptan bloques *Divs* y *Spans* propios del HTML con sintaxis delimitada por :::

Estructura general:

-   Comienza y termina con igual número de : - mínimo de 3 :::
-   Agregar llaves para indicar el inicio de la clase `{.class}` o `{varias-clase}`

::: {.class}

Este contenido es el modificado

:::

. . .

::: {style="border-left:10px solid purple"}

Este contenido tiene un diseño de borde izquierdo violeta

:::

. . .

::: {style="border-left:10px solid purple"}
*Este contenido tiene un diseño de borde izquierdo violeta*
:::

. . .

-   Se puede pensar en una división ::: como un `<div>` **HTML** pero que también sirve cuando la salida es en PDF.

## Bloques de llamadas {.title-top}

::: {style="font-size: 32px;"}
::: {.callout-note appearance="simple"}
Existen cinco tipos de leyendas, que incluyen: `note` (nota), `tip` (consejo), `warning` (advertencia), `caution` (precaución), e `important` (importante).
:::
:::

. . .

::: callout-note
## Nota {.title-top}

Existen cinco tipos de leyendas, que incluyen: `note` (nota), `tip` (consejo), `warning` (advertencia), `caution` (precaución), e `important` (importante)
:::

. . .

::: callout-warning
## Advertencia

Estos bloques facilitan una forma sencilla de llamar la atención, por ejemplo, sobre esta advertencia.
:::

. . .

::: callout-important
## Importante

Se pueden editar los titulos con doble #. Por ejemplo: \## Importante
:::

. . .

::: callout-tip
## Consejo
:::

. . .

::: callout-caution
## Precaución

Esto se encuentra bajo construcción
:::

## Bloques de línea (Spans) {.title-top}

Estructura general:

-   Encerrar el texto con corchetes \[\].
-   Agregar llaves para indicar el inicio de la clase `{.class}` o `{varias-clases}`

\[texto\]{.class}

. . .

-   Estos spans entre corchetes [texto]{.class} se pueden considerar como un `<span .class>Texto</span>` de **HTML** pero nuevamente estos son compatibles para aplicar atributos nativos de Pandoc/Quarto.

<br>

Este es un texto con formato \[especial\]{style="color:orange;"}.

. . .

Este es un texto con formato [especial]{style="color:orange;"}.

-   Tanto los Divs como los Spans se pueden agregar desde el modo Visual: *Format -\> Div...* y *Format -\> Span...*

## `r fontawesome::fa("laptop-code", "white")`️ Actividad 2 {background-color="#704b10" transition="slide-in"}

::: {.fragment .actividades}
<br>

-   Regrese al documento HTML Quarto que generó recién

-   Inserte algún bloque `Span` sobre alguna palabra y cambie su color

-   Inserte algún bloque `Div` sobre un párrafo y modifique el tamaño de la letra con **font-size: 36px;**

-   Inserte el bloque de llamada (`callout`) que desee y configúrelo.

-   En cada situación visualice los cambios en el modo `Source` y renderice
:::

## Figuras {.nostretch .title-top}

-   Sintaxis básica de markdown

\![Mar del Plata\](images/mdp.jpg)

![Mar del Plata](images/mdp.jpg)

## Figuras {.nostretch .title-top}

-   Sintaxis markdown con opciones

\![Mar del Plata\](images/mdp.jpg){width=120%}

![Mar del Plata](images/mdp.jpg){width="120%"}

## Figuras {.nostretch .title-top}

-   Desde código R

```{r}
#| echo: fenced
#| out-width: 50%
#| fig-align: right


knitr::include_graphics("images/mdp.jpg")
```

## Fragmentos / columnas

::: columns
::: {.column width="50%"}
\![Mar del Plata\](images/mdp.jpg){fig-align="left"}

![Mar del Plata](images/mdp.jpg){fig-align="left"}

Las columnas se construyen con bloques Divs ::: columns y luego ::: {.column width="50%"} para cada una de ellas (en este ejemplo que son 2). Cada bloque se cierra con :::
:::

::: {.column width="50%"}
\![\](images/mdp2.png){fig-align="right" .lightbox}

![](images/mdp2.PNG){.lightbox fig-align="right"}

La opción `.lightbox` utiliza la librería de javascript [GLightbox](https://biati-digital.github.io/glightbox/) para mostrar un efecto sobre la imagen cuando pulsamos sobre ella.
:::
:::

## TabSet (Pestañas) {.title-top}

::: panel-tabset
## Codigo

```{r}
#| echo: fenced
#| eval: false
head(datasets::iris)
```

Las pestañas son un bloque Divs especiales ::: {.panel-tabset} :::

El nombre de cada pestaña se establece con **\## Nombre**

## Salida

```{r}
#| eval: true
#| echo: false
head(datasets::iris)
```
:::

## Diagramas {.title-top}

`Quarto` tiene soporte nativo para incrustar diagramas [Mermaid](https://mermaid-js.github.io/mermaid/#/) y [Graphviz](https://graphviz.org/) . Esto permite crear diagramas de flujo, diagramas de secuencia, diagramas de estado, diagramas de Gantt y otros utilizando una sintaxis de texto plano inspirada en Markdown.

```{{{mermaid}}}
flowchart LR
  A[Inicio] --> B(Pre-proceso)
  B --> C{Decisión}
  C --> D[Resultado 1]
  C --> E[Resultado 2]
```

![](images/diagrama.PNG){width="60%"}

-   Para ver más sobre la [documentación de Mermaid.js](https://mermaid-js.github.io/mermaid/#/flowchart)

## `r fontawesome::fa("laptop-code", "white")`️ Actividad 3 {background-color="#704b10" transition="slide-in"}

<br>

::: {.fragment .actividades}
-   En el documento HTML Quarto que estamos editando, inserte un bloque TabSet con dos pestañas. En cada una de ellas incluya una imagen (puede capturarla con la herramienta `Recortes` de **Windows**) y almacenarla dentro de la carpeta de trabajo del proyecto.

<br>

-   Incorpore un diagrama Mermaid. Puede copiar el ejemplo de la diapositiva o modificarlo a gusto.

<br>

-   En cada situación visualice los cambios en el modo `Source` y renderice
:::

##  {#docu-estaticos-end data-menu-title="Continuará..." background-image="images/papel.jpg" aria-label="Unos papeles escritos"}

::: r-fit-text
[Continuará...]{style="color:#5e3f0f;font-family: 'Sedan', italic;"}
:::
